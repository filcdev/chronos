/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as PrivateRouteRouteImport } from './routes/_private/route'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as AuthWelcomeRouteImport } from './routes/auth/welcome'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AuthErrorRouteImport } from './routes/auth/error'
import { Route as PrivateProbaRouteImport } from './routes/_private/proba'
import { Route as PrivateAdminRouteRouteImport } from './routes/_private/admin/route'
import { Route as PrivateAdminFeatureFlagsRouteImport } from './routes/_private/admin/feature-flags'
import { Route as PrivateAdminDoorsIndexRouteImport } from './routes/_private/admin/doors/index'
import { Route as PrivateAdminDoorsDevicesRouteImport } from './routes/_private/admin/doors/devices'
import { Route as PrivateAdminDoorsCardsRouteImport } from './routes/_private/admin/doors/cards'

const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateRouteRoute = PrivateRouteRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRouteRoute,
} as any)
const AuthWelcomeRoute = AuthWelcomeRouteImport.update({
  id: '/auth/welcome',
  path: '/auth/welcome',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthErrorRoute = AuthErrorRouteImport.update({
  id: '/auth/error',
  path: '/auth/error',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateProbaRoute = PrivateProbaRouteImport.update({
  id: '/proba',
  path: '/proba',
  getParentRoute: () => PrivateRouteRoute,
} as any)
const PrivateAdminRouteRoute = PrivateAdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => PrivateRouteRoute,
} as any)
const PrivateAdminFeatureFlagsRoute =
  PrivateAdminFeatureFlagsRouteImport.update({
    id: '/feature-flags',
    path: '/feature-flags',
    getParentRoute: () => PrivateAdminRouteRoute,
  } as any)
const PrivateAdminDoorsIndexRoute = PrivateAdminDoorsIndexRouteImport.update({
  id: '/doors/',
  path: '/doors/',
  getParentRoute: () => PrivateAdminRouteRoute,
} as any)
const PrivateAdminDoorsDevicesRoute =
  PrivateAdminDoorsDevicesRouteImport.update({
    id: '/doors/devices',
    path: '/doors/devices',
    getParentRoute: () => PrivateAdminRouteRoute,
  } as any)
const PrivateAdminDoorsCardsRoute = PrivateAdminDoorsCardsRouteImport.update({
  id: '/doors/cards',
  path: '/doors/cards',
  getParentRoute: () => PrivateAdminRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof PrivateAdminRouteRouteWithChildren
  '/proba': typeof PrivateProbaRoute
  '/auth/error': typeof AuthErrorRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/welcome': typeof AuthWelcomeRoute
  '/': typeof PublicIndexRoute
  '/admin/feature-flags': typeof PrivateAdminFeatureFlagsRoute
  '/admin/doors/cards': typeof PrivateAdminDoorsCardsRoute
  '/admin/doors/devices': typeof PrivateAdminDoorsDevicesRoute
  '/admin/doors': typeof PrivateAdminDoorsIndexRoute
}
export interface FileRoutesByTo {
  '/admin': typeof PrivateAdminRouteRouteWithChildren
  '/proba': typeof PrivateProbaRoute
  '/auth/error': typeof AuthErrorRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/welcome': typeof AuthWelcomeRoute
  '/': typeof PublicIndexRoute
  '/admin/feature-flags': typeof PrivateAdminFeatureFlagsRoute
  '/admin/doors/cards': typeof PrivateAdminDoorsCardsRoute
  '/admin/doors/devices': typeof PrivateAdminDoorsDevicesRoute
  '/admin/doors': typeof PrivateAdminDoorsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_private': typeof PrivateRouteRouteWithChildren
  '/_public': typeof PublicRouteRouteWithChildren
  '/_private/admin': typeof PrivateAdminRouteRouteWithChildren
  '/_private/proba': typeof PrivateProbaRoute
  '/auth/error': typeof AuthErrorRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/welcome': typeof AuthWelcomeRoute
  '/_public/': typeof PublicIndexRoute
  '/_private/admin/feature-flags': typeof PrivateAdminFeatureFlagsRoute
  '/_private/admin/doors/cards': typeof PrivateAdminDoorsCardsRoute
  '/_private/admin/doors/devices': typeof PrivateAdminDoorsDevicesRoute
  '/_private/admin/doors/': typeof PrivateAdminDoorsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/proba'
    | '/auth/error'
    | '/auth/login'
    | '/auth/welcome'
    | '/'
    | '/admin/feature-flags'
    | '/admin/doors/cards'
    | '/admin/doors/devices'
    | '/admin/doors'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/admin'
    | '/proba'
    | '/auth/error'
    | '/auth/login'
    | '/auth/welcome'
    | '/'
    | '/admin/feature-flags'
    | '/admin/doors/cards'
    | '/admin/doors/devices'
    | '/admin/doors'
  id:
    | '__root__'
    | '/_private'
    | '/_public'
    | '/_private/admin'
    | '/_private/proba'
    | '/auth/error'
    | '/auth/login'
    | '/auth/welcome'
    | '/_public/'
    | '/_private/admin/feature-flags'
    | '/_private/admin/doors/cards'
    | '/_private/admin/doors/devices'
    | '/_private/admin/doors/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PrivateRouteRoute: typeof PrivateRouteRouteWithChildren
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
  AuthErrorRoute: typeof AuthErrorRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthWelcomeRoute: typeof AuthWelcomeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/auth/welcome': {
      id: '/auth/welcome'
      path: '/auth/welcome'
      fullPath: '/auth/welcome'
      preLoaderRoute: typeof AuthWelcomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/error': {
      id: '/auth/error'
      path: '/auth/error'
      fullPath: '/auth/error'
      preLoaderRoute: typeof AuthErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private/proba': {
      id: '/_private/proba'
      path: '/proba'
      fullPath: '/proba'
      preLoaderRoute: typeof PrivateProbaRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
    '/_private/admin': {
      id: '/_private/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof PrivateAdminRouteRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
    '/_private/admin/feature-flags': {
      id: '/_private/admin/feature-flags'
      path: '/feature-flags'
      fullPath: '/admin/feature-flags'
      preLoaderRoute: typeof PrivateAdminFeatureFlagsRouteImport
      parentRoute: typeof PrivateAdminRouteRoute
    }
    '/_private/admin/doors/': {
      id: '/_private/admin/doors/'
      path: '/doors'
      fullPath: '/admin/doors'
      preLoaderRoute: typeof PrivateAdminDoorsIndexRouteImport
      parentRoute: typeof PrivateAdminRouteRoute
    }
    '/_private/admin/doors/devices': {
      id: '/_private/admin/doors/devices'
      path: '/doors/devices'
      fullPath: '/admin/doors/devices'
      preLoaderRoute: typeof PrivateAdminDoorsDevicesRouteImport
      parentRoute: typeof PrivateAdminRouteRoute
    }
    '/_private/admin/doors/cards': {
      id: '/_private/admin/doors/cards'
      path: '/doors/cards'
      fullPath: '/admin/doors/cards'
      preLoaderRoute: typeof PrivateAdminDoorsCardsRouteImport
      parentRoute: typeof PrivateAdminRouteRoute
    }
  }
}

interface PrivateAdminRouteRouteChildren {
  PrivateAdminFeatureFlagsRoute: typeof PrivateAdminFeatureFlagsRoute
  PrivateAdminDoorsCardsRoute: typeof PrivateAdminDoorsCardsRoute
  PrivateAdminDoorsDevicesRoute: typeof PrivateAdminDoorsDevicesRoute
  PrivateAdminDoorsIndexRoute: typeof PrivateAdminDoorsIndexRoute
}

const PrivateAdminRouteRouteChildren: PrivateAdminRouteRouteChildren = {
  PrivateAdminFeatureFlagsRoute: PrivateAdminFeatureFlagsRoute,
  PrivateAdminDoorsCardsRoute: PrivateAdminDoorsCardsRoute,
  PrivateAdminDoorsDevicesRoute: PrivateAdminDoorsDevicesRoute,
  PrivateAdminDoorsIndexRoute: PrivateAdminDoorsIndexRoute,
}

const PrivateAdminRouteRouteWithChildren =
  PrivateAdminRouteRoute._addFileChildren(PrivateAdminRouteRouteChildren)

interface PrivateRouteRouteChildren {
  PrivateAdminRouteRoute: typeof PrivateAdminRouteRouteWithChildren
  PrivateProbaRoute: typeof PrivateProbaRoute
}

const PrivateRouteRouteChildren: PrivateRouteRouteChildren = {
  PrivateAdminRouteRoute: PrivateAdminRouteRouteWithChildren,
  PrivateProbaRoute: PrivateProbaRoute,
}

const PrivateRouteRouteWithChildren = PrivateRouteRoute._addFileChildren(
  PrivateRouteRouteChildren,
)

interface PublicRouteRouteChildren {
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  PrivateRouteRoute: PrivateRouteRouteWithChildren,
  PublicRouteRoute: PublicRouteRouteWithChildren,
  AuthErrorRoute: AuthErrorRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthWelcomeRoute: AuthWelcomeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
