/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PrivateRouteRouteImport } from './routes/_private/route'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as AuthWelcomeRouteImport } from './routes/auth/welcome'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AuthErrorRouteImport } from './routes/auth/error'
import { Route as PrivateProbaRouteImport } from './routes/_private/proba'

const PrivateRouteRoute = PrivateRouteRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AuthWelcomeRoute = AuthWelcomeRouteImport.update({
  id: '/auth/welcome',
  path: '/auth/welcome',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthErrorRoute = AuthErrorRouteImport.update({
  id: '/auth/error',
  path: '/auth/error',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateProbaRoute = PrivateProbaRouteImport.update({
  id: '/proba',
  path: '/proba',
  getParentRoute: () => PrivateRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/proba': typeof PrivateProbaRoute
  '/auth/error': typeof AuthErrorRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/welcome': typeof AuthWelcomeRoute
  '/': typeof AppIndexRoute
}
export interface FileRoutesByTo {
  '/proba': typeof PrivateProbaRoute
  '/auth/error': typeof AuthErrorRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/welcome': typeof AuthWelcomeRoute
  '/': typeof AppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteRouteWithChildren
  '/_private': typeof PrivateRouteRouteWithChildren
  '/_private/proba': typeof PrivateProbaRoute
  '/auth/error': typeof AuthErrorRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/welcome': typeof AuthWelcomeRoute
  '/_app/': typeof AppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/proba' | '/auth/error' | '/auth/login' | '/auth/welcome' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/proba' | '/auth/error' | '/auth/login' | '/auth/welcome' | '/'
  id:
    | '__root__'
    | '/_app'
    | '/_private'
    | '/_private/proba'
    | '/auth/error'
    | '/auth/login'
    | '/auth/welcome'
    | '/_app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  PrivateRouteRoute: typeof PrivateRouteRouteWithChildren
  AuthErrorRoute: typeof AuthErrorRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthWelcomeRoute: typeof AuthWelcomeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/auth/welcome': {
      id: '/auth/welcome'
      path: '/auth/welcome'
      fullPath: '/auth/welcome'
      preLoaderRoute: typeof AuthWelcomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/error': {
      id: '/auth/error'
      path: '/auth/error'
      fullPath: '/auth/error'
      preLoaderRoute: typeof AuthErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private/proba': {
      id: '/_private/proba'
      path: '/proba'
      fullPath: '/proba'
      preLoaderRoute: typeof PrivateProbaRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppIndexRoute: AppIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface PrivateRouteRouteChildren {
  PrivateProbaRoute: typeof PrivateProbaRoute
}

const PrivateRouteRouteChildren: PrivateRouteRouteChildren = {
  PrivateProbaRoute: PrivateProbaRoute,
}

const PrivateRouteRouteWithChildren = PrivateRouteRoute._addFileChildren(
  PrivateRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  PrivateRouteRoute: PrivateRouteRouteWithChildren,
  AuthErrorRoute: AuthErrorRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthWelcomeRoute: AuthWelcomeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
